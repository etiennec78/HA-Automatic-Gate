#################### automations.yaml (Miscellaneous gate-related automations) ####################
- id: "1685891275304"
  alias: "[Gate] Open for too long"
  description: Notifies every user when the gate has been open for 10 minutes

  trigger:
    - platform: state
      entity_id:
        - switch.gate
      to: open
      for:
        hours: 0
        minutes: 7
        seconds: 0

  condition: []
    # No condition

  action:
    # Play a TTS on home speaker
    - service: tts.speak
      data:
        media_player_entity_id: media_player.player0
        message: The gate has been open for 10 minutes
        cache: true
      target:
        entity_id: tts.piper
    # Send a notification to all devices
    - service: notify.all_devices
      data:
        message: The gate has been open for 10 minutes
        title: Gate
        data:
          car_ui: true
          notification_icon: mdi:gate-alert
          channel: Gate alerts
          importance: high
          tag: gate-opened-reminder
    # Wait for the gate to be closed
    - wait_for_trigger:
      - platform: state
        entity_id:
          - switch.gate
        to: "off"
    # Remove the notification sent to the users
    - service: notify.all_devices
      data:
        data:
          tag: gate-opened-reminder
        message: clear_notification
  mode: single



- id: "1688979506929"
  alias: "[Gate] Offline notification"
  description: Warns every user when the ESP32 of the gate is offline for 5 minutes

  trigger:
    # Triggers when the ESP32 is unavailable for 5 minutes
    - platform: state
      entity_id:
        - switch.gate
      to: unavailable
      for:
        hours: 0
        minutes: 5
        seconds: 0

  condition: []
    # No condition

  action:
    # Notify each user that the gate is offline
    - service: notify.all_devices
      data:
        message: Gate offline for 5 minutes
        title: Gate
        data:
          car_ui: true
          notification_icon: mdi:gate-alert
          channel: Gate alerts
          importance: high
          tag: gate-offline
    # Wait for the gate to be back online, while running this automation at most one hour
    - wait_for_trigger:
      - platform: state
        entity_id:
          - switch.gate
        to: "off"
      timeout:
        hours: 1
        minutes: 0
        seconds: 0
        milliseconds: 0
      continue_on_timeout: false
    # Remove the notification sent to the users
    - service: notify.all_devices
      data:
        message: clear_notification
        data:
          tag: gate-offline
  mode: single





#################### automations.yaml (Automatic Gate) ####################
- id: "1710799359483"
  alias: "Automatic Gate"
  description: |-
      Automatic Gate by etiennec78
      Open then close the gate when a vehicle is started at home
      Start an itinerary when a vehicle is started away from home
      Update the time of arrival of the car when it is near home
      Open then close the gate when estimated time of arrival is reached
      Abort itinerary if someone leaves his vehicle
      Flowchart : https://miro.com/app/board/uXjVMpH4Tno=/
  trigger:
    # Triggers when one of the 3 users connect to a vehicle (if you have more than one, make a custom vehcle sensor : example in configuration.yaml)
    # Sets a trigger ID corresponding to the user name
    - platform: state
      id: user0
      entity_id:
        - binary_sensor.user0_driving
      from: "off"
      to: "on"
    - platform: state
      id: user1
      entity_id:
        - binary_sensor.user1_driving
      from: "off"
      to: "on"
    - platform: state
      id: user2
      entity_id:
        - binary_sensor.user2_driving
      from: "off"
      to: "on"

  condition: []

  action:
    # If the user is currently at home
    - if:
        - condition: template
          value_template: "{{ states['person.'+trigger.id]['state'] == 'home' }}"
      then:
        # Set the user itinerary text variable to "leaving", because the user is leaving home
        - service: input_text.set_value
          target:
            entity_id: input_text.{{trigger.id}}_itinerary
          data:
            value: leaving
        # Activate the BLE transmitter on the user's phone, to close the gate when he has left (optional)
        - service: notify.mobile_app_{{trigger.id}}_phone
          data:
            message: command_ble_transmitter
            data:
              command: turn_on
        # Activate the BLE scanner from the ESP32 connected to the gate (optional)
        - service: switch.turn_on
          target:
            entity_id: switch.ibeacon_scanner
        # If the gate is closing/closed
        - if:
            - condition: state
              entity_id: switch.gate
              state: 'off'
          # Then open it because the user is leaving
          then:
            - service: switch.turn_on
              target:
                entity_id: switch.gate
        # Wait for the gate to be closed by the user, or the iBeacon to be out of reach for 20s, or the vehicle to be left, or the user to leave home, all for at most 7 minutes
        - wait_for_trigger:
            - platform: state
              entity_id:
                - switch.gate
              from: 'on'
              to: 'off'
            # WORK IN PROGRESS
            - platform: template
              value_template: "{{ as_timestamp(now()) - as_timestamp(states['sensor.gate_ibeacon_'+trigger.id].last_changed) > 20 }}"
              enabled: false
            - platform: template
              value_template: "{{ states['binary_sensor.'+trigger.id+'_driving']['state'] == 'off' }}"
            - platform: template
              value_template: "{{ states['person.'+trigger.id]['state'] != 'home' }}"
          timeout:
            hours: 0
            minutes: 7
            seconds: 0
            milliseconds: 0
        # If the timeout was reached
        - if:
            - condition: template
              value_template: "{{ wait.completed }}"
          then:
            # Notify the user that the gate will close automatically
            - service: notify.mobile_app_{{trigger.id}}_phone
              data:
                title: Gate closing
                message: The vehicle did not leave home in less than 7 minutes
                data:
                  car_ui: true
                  notification_icon: mdi:alert-circle
                  channel: Gate alerts
                  importance: high
                  tag: itinerary
            # Close the gate
            - service: switch.turn_off
              target:
                entity_id: switch.gate
            # Stop the automation
            - stop: Did not leave
              error: true
        # Remove the current itinerary since the user has left home
        - service: input_text.set_value
          target:
            entity_id: input_text.{{trigger.id}}_itinerary
          data:
            value: none
        # Deactivate the BLE transmitter on user's phone (optional)
        - service: notify.mobile_app_{{trigger.id}}_phone
          data:
            message: command_ble_transmitter
            data:
              command: turn_off
        # If the gate was closed manually or no one else is currently leaving the house
        - if:
            - condition: or
              conditions:
              - condition: state
                entity_id: switch.gate
                state: "off"
              - condition: not
                conditions:
                  - condition: or
                    conditions:
                      - condition: state
                        entity_id: input_text.user0_itinerary
                        state: leaving
                      - condition: state
                        entity_id: input_text.user1_itinerary
                        state: leaving
                      - condition: state
                        entity_id: input_text.user2_itinerary
                        state: leaving
          then:
          # Deactivate the BLE scanner from the ESP32 connected to the gate (optional)
          - service: switch.turn_off
            target:
              entity_id: switch.ibeacon_scanner
          # Stop the automation if the gate was already closed by the user manually
          - condition: state
            entity_id: switch.gate
            state: "on"
          # If no one else is currently approaching the house
          - if:
              - condition: not
                conditions:
                - condition: or
                  conditions:
                  - condition: state
                    entity_id: input_text.user0_itinerary
                    state: on_approach
                  - condition: state
                    entity_id: input_text.user1_itinerary
                    state: on_approach
                  - condition: state
                    entity_id: input_text.user2_itinerary
                    state: on_approach
            # Then close the gate as no one is in a vehicle near the house
            then:
              - service: switch.turn_off
                target:
                  entity_id: switch.gate
            # If someone is currently approaching the house
            else:
              # Notify the user that the gate will wait for next person
              - service: notify.mobile_app_{{trigger.id}}_phone
                data:
                  title: Gate awaiting another user
                  message: The gate will close once all users have entered/exited
                  data:
                    car_ui: true
                    notification_icon: mdi:sleep
                    channel: Gate alerts
                    importance: high
                    tag: itinerary
              # Wait for the gate to be closed
              - wait_for_trigger:
                  - platform: state
                    entity_id:
                      - switch.gate
                    to: "off"
              # Remove the awaiting user notification
              - service: notify.mobile_app_{{trigger.id}}_phone
                data:
                  message: clear_notification
                  data:
                    tag: itinerary
          # If someone is currently leaving the house
          else:
            # Notify the user that the gate will wait for next person
            - service: notify.mobile_app_{{trigger.id}}_phone
              data:
                title: Gate awaiting another user
                message: The gate will close once all users have entered/exited
                data:
                  car_ui: true
                  notification_icon: mdi:sleep
                  channel: Gate alerts
                  importance: high
                  tag: itinerary
            # Wait for the gate to be closed
            - wait_for_trigger:
                - platform: state
                  entity_id:
                    - switch.gate
                  to: "off"
            # Remove the awaiting user notification
            - service: notify.mobile_app_{{trigger.id}}_phone
              data:
                message: clear_notification
                data:
                  tag: itinerary
      # If the user is currently away from home
      else:
        # Set the user itinerary text variable to "arriving", because the user has entered a vehicle away from home
        - service: input_text.set_value
          target:
            entity_id: input_text.{{trigger.id}}_itinerary
          data:
            value: arriving
        # Notify the user that his itinerary has been started
        - service: notify.mobile_app_{{trigger.id}}_phone
          data:
            title: Itinerary
            message: Your itinerary has been started
            data:
              car_ui: true
              notification_icon: mdi:map-check
              channel: Gate alerts
              importance: high
              tag: itinerary
        # Update the user travel time once to display an approximation on the dashboard (while taking into account the time elapsed)
        - service: homeassistant.update_entity
          target:
            entity_id: sensor.{{trigger.id}}_travel_time
        # Repeat while the user is driving
        - repeat:
            while:
              - condition: template
                value_template: "{{ states['binary_sensor.'+trigger.id+'_driving']['state'] == 'on' }}"
            sequence:
              # Wait for a user position update or a deactivation of his driving sensor
              - wait_for_trigger:
                  - platform: event
                    event_type: state_changed
                    event_data:
                      entity_id: person.{{trigger.id}}
                  - platform: template
                    value_template: "{{ states['binary_sensor.'+trigger.id+'_driving']['state'] == 'off' }}"
              # Repeat while the user is nearer than 1km of radius from home and is still driving
              # This allows to update to a precise ETA even if a traffic jam appears near home
              # It will return to the previous loop if the user has entered the radius but passed by and didn't go directly to home
              - repeat:
                  while:
                    - condition: template
                      value_template: "{{ states['sensor.distance_'+trigger.id]['state'] | int < 1000 }}"
                    - condition: template
                      value_template: "{{ states['binary_sensor.'+trigger.id+'_driving']['state'] == 'on' }}"
                  sequence:
                    # Update the user travel time when there is a new position
                    - service: homeassistant.update_entity
                      target:
                        entity_id: sensor.{{trigger.id}}_travel_time
                    # Calculate its Estimated Time of Arrival
                    # 42s : the time needed for my gate to open/close
                    # 25s : the margin I give to make sure that everything is ready when I arrive, even if the travel time was too short
                    - service: input_datetime.set_datetime
                      target:
                        entity_id: input_datetime.planned_opening
                      data:
                        datetime: >
                          {{ (as_timestamp(now()) +
                          (state_attr('sensor.'+trigger.id+'_travel_time', 'duration') | float *
                          60) - 42 - 25) | timestamp_custom('%Y-%m-%d %H:%M:%S') }}
                    # If the ETA is not already past
                    - if:
                        - condition: template
                          value_template: "{{ state_attr('input_datetime.planned_opening', 'timestamp') > as_timestamp(now()) }}"
                      # Then wait for ETA or new position or car left, and cancel if it hasn't been updated for 5 mins (e.g: if device offline)
                      then:
                        - wait_for_trigger:
                            - platform: event
                              event_type: state_changed
                              event_data:
                                entity_id: person.{{trigger.id}}
                            - platform: time
                              at: input_datetime.planned_opening
                            - platform: template
                              value_template: "{{ states['binary_sensor.'+trigger.id+'_driving']['state'] == 'off' }}"
                          timeout:
                            hours: 0
                            minutes: 5
                            seconds: 0
                            milliseconds: 0
                          continue_on_timeout: false
                    # Restart the second repeat loop if the wait_for_trigger was triggered by a position or car sensor update
                    # This allows the loop to refresh the ETA with a new position or stop the script if the car was left
                    # This is quite a redundant condition as it has already been checked above, if you find a better way to restart the loop, feel free to make a PR
                    - condition: template
                      value_template: "{{ state_attr('input_datetime.planned_opening', 'timestamp') <= as_timestamp(now()) }}"
                    # Set the user itinerary text variable to "on_approach", because the user is near the house and will arrive soon
                    - service: input_text.set_value
                      data:
                        value: on_apporach
                      target:
                        entity_id: input_text.{{trigger.id}}_itinerary
                    # If the gate is closing/closed
                    - if:
                        - condition: state
                          entity_id: switch.gate
                          state: "off"
                      # Then open it
                      then:
                        - service: switch.turn_on
                          target:
                          entity_id: switch.gate
                    # Wait for the gate to be closed manually, or the vehicle to be left, or the user to leave home, all for at most 7 minutes
                    - wait_for_trigger:
                        - platform: state
                          entity_id:
                            - switch.gate
                          from: "on"
                          to: "off"
                        - platform: template
                          value_template: "{{ states['binary_sensor.'+trigger.id+'_driving']['state'] == 'off' }}"
                        - platform: template
                          value_template: "{{ states['person.'+trigger.id]['state'] != 'home' }}"
                      timeout:
                        hours: 0
                        minutes: 7
                        seconds: 0
                        milliseconds: 0
                    # If the timeout was reached
                    - if:
                        - condition: template
                          value_template: "{{ wait.completed }}"
                      then:
                        # Notify the user that the gate will close automatically
                        - service: notify.mobile_app_{{trigger.id}}_phone
                          data:
                            title: Gate closing
                            message: The vehicle did not arrive home in less than 7 minutes
                            data:
                              car_ui: true
                              notification_icon: mdi:alert-circle
                              channel: Gate alerts
                              importance: high
                              tag: itinerary
                        # Close the gate
                        - service: switch.turn_off
                          target:
                            entity_id: switch.gate
                        # Stop the automation
                        - stop: Did not arrive
                          error: true
                    # Remove the current itinerary since the user has arrived home
                    - service: input_text.set_value
                      data:
                        value: none
                      target:
                        entity_id: input_text.{{trigger.id}}_itinerary
                    # Continue the script only if the gate wasn't closed manually
                    - condition: state
                      entity_id: switch.gate
                      state: "on"
                    # If someone is currently approaching or leaving the house
                    - if:
                        - condition: or
                          conditions:
                          - condition: state
                            entity_id: input_text.user0_itinerary
                            state: on_approach
                          - condition: state
                            entity_id: input_text.user1_itinerary
                            state: on_approach
                          - condition: state
                            entity_id: input_text.user2_itinerary
                            state: on_approach
                          - condition: state
                            entity_id: input_text.user0_itinerary
                            state: leaving
                          - condition: state
                            entity_id: input_text.user1_itinerary
                            state: leaving
                          - condition: state
                            entity_id: input_text.user2_itinerary
                            state: leaving
                      then:
                        # Notify the user that the gate will wait for next person
                        - service: notify.mobile_app_{{trigger.id}}_phone
                          data:
                            title: Gate awaiting another user
                            message: The gate will close once all users have entered/exited
                            data:
                              car_ui: true
                              notification_icon: mdi:sleep
                              channel: Gate alerts
                              importance: high
                              tag: itinerary
                        # Wait for the gate to be closed
                        - wait_for_trigger:
                            - platform: state
                              entity_id:
                                - switch.gate
                              from: "on"
                              to: "off"
                      # If no one is currently approaching or leaving the house
                      else:
                        # Then close the gate
                        - service: switch.turn_off
                          target:
                            entity_id: switch.gate
              # Remove the notifcation received by the user when its itinerary was started or awaiting next user
              - service: notify.mobile_app_{{trigger.id}}_phone
                data:
                  message: clear_notification
                  data:
                    tag: itinerary
              # Stop the whole script as it was successful
              - stop: Successful
        # If both loop were broken
        # Remove the current itinerary since the user has left his vehicle or timed out
        - service: input_text.set_value
          data:
            value: none
          target:
            entity_id: input_text.{{trigger.id}}_itinerary
        # Notify the user that his itinerary has canceled
        - service: notify.mobile_app_{{trigger.id}}_phone
          data:
            title: Itinerary canceled
            message: You have left your vehicle or timed out
            data:
              car_ui: true
              notification_icon: mdi:alert-circle
              channel: Gate alerts
              importance: high
              tag: itinerary
  # Run in parralel to let the automation start with multiple users driving simultaneously
  mode: parallel
  max: 15
